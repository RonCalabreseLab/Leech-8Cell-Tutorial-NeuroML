'''
Neuron simulator export for:

Components:
    leak_channel (Type: ionChannelPassive:  conductance=6.8000000000000005E-9 (SI conductance))
    na_channel (Type: ionChannelHH:  conductance=1.0000000000000001E-7 (SI conductance))
    isopotential (Type: pointCellCondBased:  v0=-0.05456137733296305 (SI voltage) thresh=-0.025 (SI voltage) C=4.0E-12 (SI capacitance))
    pulseGenStart (Type: pulseGenerator:  delay=0.01 (SI time) duration=0.2 (SI time) amplitude=5.5E-11 (SI current))
    network_1 (Type: network)
    simulation_2 (Type: Simulation:  length=0.3 (SI time) step=1.0E-6 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.0
         org.neuroml.model   v1.5.0
         jLEMS               v0.9.8.7

'''

import neuron

import time

import hashlib
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=123456789):

        print("\n    Starting simulation in NEURON generated from NeuroML2 model...\n")

        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=simulation_2 type=Simulation) of network/component: network_1 (Type: network)
        
        '''
        # ######################   Population: hhpop
        print("Population hhpop contains 1 instance(s) of component: isopotential of type: pointCellCondBased")

        h(" {n_hhpop = 1} ")
        '''
        Population hhpop contains instances of Component(id=isopotential type=pointCellCondBased)
        whose dynamics will be implemented as a mechanism (isopotential) in a mod file
        '''
        h(" create hhpop[1]")
        h(" objectvar m_isopotential_hhpop[1] ")

        for i in range(int(h.n_hhpop)):
            h.hhpop[i].L = 10.0
            h.hhpop[i](0.5).diam = 10.0
            h.hhpop[i](0.5).cm = 1.2732395447351628
            h.hhpop[i].push()
            h(" hhpop[%i]  { m_isopotential_hhpop[%i] = new isopotential(0.5) } "%(i,i))

            h.m_isopotential_hhpop[i].v0 = -54.56138
            h.m_isopotential_hhpop[i].thresh = -25.0
            h.m_isopotential_hhpop[i].C = 4.0E-6
            h.pop_section()

            self.next_global_id+=1


        # Adding single input: Component(id=null type=explicitInput)
        h("objref explicitInput_pulseGenStarthhpop0")
        h("hhpop[0] { explicitInput_pulseGenStarthhpop0 = new pulseGenStart(0.5) } ")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt

        # ######################   Display: self.display_display_1
        self.display_display_1 = h.Graph(0)
        self.display_display_1.size(0,h.tstop,-80.0,50.0)
        self.display_display_1.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
        h.graphList[0].append(self.display_display_1)
        # Line, plotting: hhpop[0]/v
        self.display_display_1.addexpr("hhpop[0].v(0.5)", "hhpop[0].v(0.5)", 1, 1, 0.8, 0.9, 2)

        # ######################   Display: self.display_display_2
        self.display_display_2 = h.Graph(0)
        self.display_display_2.size(0,h.tstop,-80.0,50.0)
        self.display_display_2.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
        h.graphList[0].append(self.display_display_2)
        # Line, plotting: hhpop[0]/na_pop/na_channel/m/q
        self.display_display_2.addexpr("m_isopotential_hhpop[0].na_pop_na_channel_m_q", "m_isopotential_hhpop[0].na_pop_na_channel_m_q", 1, 1, 0.8, 0.9, 2)
        # Line, plotting: hhpop[0]/na_pop/na_channel/h/q
        self.display_display_2.addexpr("m_isopotential_hhpop[0].na_pop_na_channel_h_q", "m_isopotential_hhpop[0].na_pop_na_channel_h_q", 2, 1, 0.8, 0.9, 2)



        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        # ######################   File to save: results/tester_3_results.dat (of0)
        # Column: hhpop[0]/v
        h(' objectvar v_v_of0 ')
        h(' { v_v_of0 = new Vector() } ')
        h(' { v_v_of0.record(&hhpop[0].v(0.5)) } ')
        h.v_v_of0.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        h.nrncontrolmenu()


    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        h.run()

        self.sim_end = time.time()
        sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(sim_time, sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()

        self.display_display_1.exec_menu("View = plot")
        self.display_display_2.exec_menu("View = plot")

        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...+ '\n')
        f_time_f2.close()
        print("Saved data to: time.dat")

        # ######################   File to save: results/tester_3_results.dat (of0)
        py_v_v_of0 = [ float(x  / 1000.0) for x in h.v_v_of0.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_of0_f2 = open('results/tester_3_results.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_of0_f2.write('%e\t'% py_v_time[i]  + '%e\t'%(py_v_v_of0[i]) + '\n')
        f_of0_f2.close()
        print("Saved data to: results/tester_3_results.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

if __name__ == '__main__':

    ns = NeuronSimulation(tstop=300, dt=0.001, seed=123456789)

    ns.run()

